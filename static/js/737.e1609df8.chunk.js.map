{"version":3,"file":"static/js/737.e1609df8.chunk.js","mappings":"gLACA,EAA4B,iCAA5B,EAAmE,2BAAnE,EAAsG,6B,SCoFtG,EAhFsB,WAEpB,IAAQA,GAAUC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,CAAK,IAApCF,MAEFG,GAAWC,EAAAA,EAAAA,MAQjB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAGH,UAAWC,EAAUC,SAAER,KAC1BS,EAAAA,EAAAA,KAAA,UACEH,UAAWC,EACXG,KAAK,SACLC,QAb0B,WAC9BR,EAAS,CAAEO,KAAM,YAAaE,QAAS,GACzC,EAWuCJ,SAClC,cAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAWC,EACXG,KAAK,SACLC,QAjB0B,WAC9BR,EAAS,CAAEO,KAAM,YAAaE,QAAS,GACzC,EAeuCJ,SAClC,eAKP,C","sources":["webpack://react-training/./src/components/CounterSecond/CounterSecond.module.css?b0c7","components/CounterSecond/CounterSecond.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"CounterSecond_container__usxni\",\"btn\":\"CounterSecond_btn__PNWiL\",\"count\":\"CounterSecond_count__H2Wgp\"};","// import { useReducer } from 'react';\n// import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './CounterSecond.module.css';\n\nconst CounterSecond = () => {\n  // const [total, setTotal] = useState();\n  const { total } = useSelector(state => state);\n\n  const dispatch = useDispatch();\n  const handleCounterAIncrement = () => {\n    dispatch({ type: 'increment', payload: 1 });\n  };\n  const handleCounterBIncrement = () => {\n    dispatch({ type: 'decrement', payload: 1 });\n  };\n\n  return (\n    <div className={css.container}>\n      <p className={css.count}>{total}</p>\n      <button\n        className={css.btn}\n        type=\"button\"\n        onClick={handleCounterAIncrement}\n      >\n        Increase\n      </button>\n      <button\n        className={css.btn}\n        type=\"button\"\n        onClick={handleCounterBIncrement}\n      >\n        Decrease\n      </button>\n    </div>\n  );\n};\n\n// function countReducer(state, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       // return state + action.payload;\n//       return { ...state, count: state.count + action.payload };\n\n//     case 'decrement':\n//       // return state - action.payload;\n//       return { ...state, count: state.count - action.payload };\n\n//     default:\n//       throw new Error('Unsuported action type $action.type{}');\n//   }\n// }\n// function init(initialState) {\n//   // використовується наприклад для Локал Сторедж, загрузка перший раз\n//   return { ...initialState, count: initialState.count + 100 };\n// }\n\n// function CounterSecond() {\n//   // const [count, setCount] = useState(0);\n\n//   // const [count, dispatch] = useReducer(countReducer, 0 );\n//   const [state, dispatch] = useReducer(countReducer, { count: 0 }, init);\n//   // const [state, dispatch] = useReducer(reducer, 0, init);\n\n//   return (\n//     <div className={css.container}>\n//       <p className={css.count}>{state.count}</p>\n//       <button\n//         className={css.btn}\n//         type=\"button\"\n//         onClick={() => dispatch({ type: 'increment', payload: 1 })}\n//       >\n//         Increase\n//       </button>\n//       <button\n//         className={css.btn}\n//         type=\"button\"\n//         onClick={() => dispatch({ type: 'decrement', payload: 1 })}\n//       >\n//         Decrease\n//       </button>\n//     </div>\n//   );\n// }\n\nexport default CounterSecond;\n"],"names":["total","useSelector","state","dispatch","useDispatch","_jsxs","className","css","children","_jsx","type","onClick","payload"],"sourceRoot":""}